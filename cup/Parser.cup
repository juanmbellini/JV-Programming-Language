package atlc;

import java_cup.runtime.*;
import atlc.ast.*;
parser code {:

	public void syntax_error(Symbol s) {
		System.err.println("Syntax error at " + s);
    }

    public static void main(String args[]) throws Exception {
        ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
		new Parser(new Scanner(new java.io.FileReader(args[0]), symbolFactory), symbolFactory).debug_parse();
    }
:}


terminal FUNC, RET; // Functions
terminal SP, INDENT, DEDENT, EOL; // Whitespace
terminal TYPE_INT, TYPE_BOOL, TYPE_STR; // Types
terminal VAR_NAME;
terminal READ_LINE, WRITE_LINE, WRITE; // IO

// Literals
terminal Integer LIT_INT;
terminal Boolean LIT_BOOL;
terminal String  LIT_STR;

terminal IF, ELSE;
terminal DO, WHILE;

terminal PLUS, TIMES, MINUS, DIVIDE;
terminal EQ, NEQ, GT, LT, LE, GE, NOT, OR, AND;
terminal ASSIGN, ASSIGN_TYPE;

non terminal program, stmt_list, stmt;
non terminal type, stmt_def_maybe_assign, stmt_assign;
non terminal stmt_if_maybe_else, stmt_if;
non terminal stmt_while, stmt_io;
non terminal expr, expr_bool, expr_int, expr_str;
non terminal block;

precedence left ELSE;
precedence left SP; // TODO: CHECK IF OK


// ESTRUCTURA
start with program;

program
    ::= stmt_list
;

stmt_list
    ::= stmt stmt_list
    | // empty
;

stmt
    ::= stmt_if_maybe_else
    | stmt_while
    | stmt_def_maybe_assign
    | stmt_assign
    | stmt_io
;

stmt_if_maybe_else
    ::= stmt_if | stmt_if ELSE block
;

stmt_if
    ::= IF SP expr_bool block
;

stmt_while
    ::= WHILE expr_bool block
;

stmt_def_maybe_assign
    ::= type ASSIGN_TYPE VAR_NAME EOL
    | type ASSIGN_TYPE stmt_assign
;

type
    ::= TYPE_BOOL
    | TYPE_INT
    | TYPE_STR
;

// TODO: FUNCTIONS
// TODO: ARRAY

stmt_assign
    ::= VAR_NAME SP ASSIGN SP expr EOL
;

// TODO: FEATURE WRITE MANY (read many?)
stmt_io
    ::= READ_LINE SP VAR_NAME EOL
    | WRITE_LINE SP expr EOL
    | WRITE SP expr EOL
;

expr
    ::= expr_bool
    | expr_int
    | expr_str
    | VAR_NAME
;

// TODO PREFIX BOOL CONDITIONS
expr_bool
    ::= LIT_BOOL
;

// TODO PREFIX INT OPERATIONS
expr_int
    ::= LIT_INT
;

expr_str
    ::= LIT_STR
;

block
    ::= EOL INDENT stmt_list DEDENT
;
