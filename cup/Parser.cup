package atlc;

import java_cup.runtime.*;

parser code {:
    public void syntax_error(Symbol s) {
        System.err.println("Syntax error at " + s);
    }

    public static void main(String args[]) throws Exception {
        ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
        new Parser(
            new Scanner(new java.io.FileReader(args[0]), symbolFactory),
            symbolFactory
        ).parse();
    }
:}

terminal FUNC, RET, EXIT; // Functions
terminal SP, INDENT, DEDENT, EOL; // Whitespace
terminal TYPE;
terminal VAR_NAME;
terminal READ_LINE, WRITE_LINE, WRITE; // IO

// Literals
terminal Integer LIT_INT;
terminal Boolean LIT_BOOL;
terminal String  LIT_STR;

terminal IF, ELSE;
terminal DO, WHILE;

terminal ARITHMETIC_OPERATOR;
terminal BOOLEAN_OPERATOR, UNARY_BOOLEAN_OPERATOR;
terminal ASSIGN, ASSIGN_TYPE;

non terminal program, stmt_list, stmt;
non terminal stmt_def_maybe_assign, stmt_assign;
non terminal stmt_if_maybe_else, stmt_if;
non terminal stmt_while, stmt_io, stmt_exit;
non terminal expr, expr_bool, expr_int, expr_str;
non terminal block;

precedence left ELSE;
precedence left SP; // TODO: CHECK IF OK


// ESTRUCTURA
start with program;

program
    ::= stmt_list {: System.out.println("stmt_list -> FUCK YEAH!"); :}
;

stmt_list
    ::= stmt stmt_list {: System.out.println("stmt stmt_list -> stmt_list"); :}
    | // empty
;

stmt
    ::= stmt_if_maybe_else {: System.out.println("stmt_if_maybe_else -> stmt"); :}
    | stmt_while {: System.out.println("stmt_while -> stmt"); :}
    | stmt_def_maybe_assign {: System.out.println("stmt_def_maybe_assign -> stmt"); :}
    | stmt_assign {: System.out.println("assign -> stmt"); :}
    | stmt_io {: System.out.println("stmt_io -> stmt"); :}
    | stmt_exit {: System.out.println("stmt_exit -> stmt"); :}
;

stmt_if_maybe_else
    ::= stmt_if {: System.out.println("stmt_if -> stmt_if_maybe_else"); :}
	| stmt_if ELSE block {: System.out.println("stmt_if ELSE block -> stmt_if_maybe_else"); :}
;

stmt_if
    ::= IF SP expr_bool block {: System.out.println("IF SP expr_bool block -> stmt_if"); :}
;

stmt_while
    ::= WHILE SP expr_bool block {: System.out.println("WHILE expr_bool block -> stmt_while"); :}
;

stmt_exit
	::= EXIT SP expr_int EOL {: System.out.println("EXIT SP expr_int EOL -> stmt_exit"); :}
;

stmt_def_maybe_assign
	::= TYPE ASSIGN_TYPE VAR_NAME EOL {: System.out.println("TYPE ASSIGN_TYPE VAR_NAME EOL -> stmt_def_maybe_assign"); :}
    | TYPE ASSIGN_TYPE stmt_assign {: System.out.println("TYPE ASSIGN_TYPE stmt_assign -> stmt_def_maybe_assign"); :}
;

// TODO: FUNCTIONS
// TODO: ARRAY

stmt_assign
    ::= VAR_NAME SP ASSIGN SP expr EOL {: System.out.println("VAR_NAME SP ASSIGN SP expr EOL -> stmt_assign"); :}
;

// TODO: FEATURE WRITE MANY (read many?)
stmt_io
    ::= READ_LINE SP VAR_NAME EOL {: System.out.println("READ_LINE SP VAR_NAME EOL -> stmt_io"); :} 
    | WRITE_LINE SP expr EOL {: System.out.println("WRITE_LINE SP expr EOL -> stmt_io"); :}
    | WRITE SP expr EOL {: System.out.println("WRITE SP expr EOL -> stmt_io"); :}
;

expr
    ::= expr_bool {: System.out.println("expr_bool -> expr"); :}
    | expr_int {: System.out.println("expr_int -> expr"); :}
    | expr_str {: System.out.println("expr_str -> expr"); :}
    | VAR_NAME {: System.out.println("VAR_NAME -> expr"); :}
;

// TODO PREFIX BOOL CONDITIONS
expr_bool
    ::= LIT_BOOL {: System.out.println("LIT_BOOL -> expr_bool"); :}
    | BOOLEAN_OPERATOR SP expr_int SP expr_int {: System.out.println("BOOLEAN_OPERATOR SP expr_bool SP expr_int -> expr_bool"); :}
    | BOOLEAN_OPERATOR SP VAR_NAME SP expr_int {: System.out.println("BOOLEAN_OPERATOR SP VAR_NAME SP expr_int -> expr_bool"); :}
    | BOOLEAN_OPERATOR SP expr_int SP VAR_NAME {: System.out.println("BOOLEAN_OPERATOR SP expr_int SP VAR_NAME -> expr_bool"); :}
    | BOOLEAN_OPERATOR SP VAR_NAME SP VAR_NAME {: System.out.println("BOOLEAN_OPERATOR SP VAR_NAME SP VAR_NAME -> expr_bool"); :}
    | UNARY_BOOLEAN_OPERATOR expr_int {: System.out.println("UNARY_BOOLEAN_OPERATOR expr_int -> expr_bool"); :}
    | UNARY_BOOLEAN_OPERATOR VAR_NAME {: System.out.println("UNARY_BOOLEAN_OPERATOR VAR_NAME -> expr_bool"); :}
;

// TODO PREFIX INT OPERATIONS
expr_int
    ::= LIT_INT {: System.out.println("LIT_INT -> expr_int"); :}
    | ARITHMETIC_OPERATOR SP expr_int SP expr_int {: System.out.println("ARITHMETIC_OPERATOR SP expr_int SP expr_int -> expr_int"); :}
    | ARITHMETIC_OPERATOR SP VAR_NAME SP expr_int {: System.out.println("ARITHMETIC_OPERATOR SP VAR_NAME SP expr_int -> expr_int"); :}
    | ARITHMETIC_OPERATOR SP expr_int SP VAR_NAME {: System.out.println("ARITHMETIC_OPERATOR SP expr_int SP VAR_NAME -> expr_int"); :}
    | ARITHMETIC_OPERATOR SP VAR_NAME SP VAR_NAME {: System.out.println("ARITHMETIC_OPERATOR SP VAR_NAME SP VAR_NAME -> expr_int"); :}
;

expr_str
    ::= LIT_STR {: System.out.println("LIT_STR -> expr_str"); :}
;

block
    ::= EOL INDENT stmt_list DEDENT {: System.out.println("EOL INDENT stmt_list DEDENT -> block"); :}
;
