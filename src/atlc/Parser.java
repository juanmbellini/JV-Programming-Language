
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Thu Jun 30 23:57:00 ART 2016
//----------------------------------------------------

package atlc;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Thu Jun 30 23:57:00 ART 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\004\004\000\002\004\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\004\000\002\006\005\000\002\006\004\000\002" +
    "\006\005\000\002\006\004\000\002\006\005\000\002\007" +
    "\010\000\002\007\012\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\010\011\000\002\010\010\000\002\016\003\000\002" +
    "\016\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\004\000\002\012" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\004\004\005\001\002\000\004\002\140\001" +
    "\002\000\004\043\006\001\002\000\004\044\007\001\002" +
    "\000\030\011\027\012\013\013\022\032\015\033\017\034" +
    "\026\036\024\037\031\040\012\043\016\044\007\001\002" +
    "\000\010\002\uffff\012\uffff\043\uffff\001\002\000\004\002" +
    "\000\001\002\000\004\035\137\001\002\000\004\041\132" +
    "\001\002\000\004\043\ufffa\001\002\000\004\035\130\001" +
    "\002\000\006\027\127\043\uffed\001\002\000\004\035\125" +
    "\001\002\000\004\043\ufffc\001\002\000\004\043\ufffb\001" +
    "\002\000\004\041\114\001\002\000\004\043\113\001\002" +
    "\000\004\031\112\001\002\000\004\043\ufff9\001\002\000" +
    "\004\035\110\001\002\000\004\043\033\001\002\000\010" +
    "\002\ufffe\012\ufffe\043\ufffe\001\002\000\004\035\032\001" +
    "\002\000\004\043\uffef\001\002\000\004\044\007\001\002" +
    "\000\004\012\035\001\002\000\004\041\036\001\002\000" +
    "\016\007\037\024\050\027\044\030\046\035\043\041\051" +
    "\001\002\000\012\007\037\027\044\035\053\041\051\001" +
    "\002\000\012\025\uffd4\026\uffd4\042\uffd4\043\uffd4\001\002" +
    "\000\012\025\uffe7\026\uffe7\042\uffe7\043\uffe7\001\002\000" +
    "\036\005\uffd8\006\uffd8\007\uffd8\010\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\025\uffd8\026\uffd8\042" +
    "\uffd8\043\uffd8\001\002\000\036\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\025\uffe5\026\uffe5\042\uffe5\043\uffe5\001\002\000\036" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9\026\uffe9\042\uffe9" +
    "\043\uffe9\001\002\000\026\005\055\006\060\007\056\010" +
    "\057\016\075\017\074\020\077\021\100\022\076\023\073" +
    "\001\002\000\012\025\uffe6\026\uffe6\042\uffe6\043\uffe6\001" +
    "\002\000\010\025\067\026\066\042\072\001\002\000\016" +
    "\007\037\024\050\027\044\030\046\035\043\041\051\001" +
    "\002\000\012\007\037\027\044\035\053\041\051\001\002" +
    "\000\014\005\055\006\060\007\056\010\057\042\054\001" +
    "\002\000\036\005\uffe8\006\uffe8\007\uffe8\010\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\026" +
    "\uffe8\042\uffe8\043\uffe8\001\002\000\036\005\uffda\006\uffda" +
    "\007\uffda\010\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\025\uffda\026\uffda\042\uffda\043\uffda\001\002" +
    "\000\012\007\037\027\044\035\053\041\051\001\002\000" +
    "\012\007\037\027\044\035\053\041\051\001\002\000\012" +
    "\007\037\027\044\035\053\041\051\001\002\000\012\007" +
    "\037\027\044\035\053\041\051\001\002\000\036\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\025\uffdc\026\uffdc\042\uffdc\043\uffdc" +
    "\001\002\000\036\005\uffdb\006\uffdb\007\uffdb\010\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\025\uffdb" +
    "\026\uffdb\042\uffdb\043\uffdb\001\002\000\036\005\uffdd\006" +
    "\060\007\uffdd\010\057\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\025\uffdd\026\uffdd\042\uffdd\043\uffdd\001" +
    "\002\000\036\005\uffde\006\060\007\uffde\010\057\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\025\uffde\026" +
    "\uffde\042\uffde\043\uffde\001\002\000\012\025\uffd5\026\uffd5" +
    "\042\uffd5\043\uffd5\001\002\000\016\007\037\024\050\027" +
    "\044\030\046\035\043\041\051\001\002\000\016\007\037" +
    "\024\050\027\044\030\046\035\043\041\051\001\002\000" +
    "\012\025\uffd7\026\066\042\uffd7\043\uffd7\001\002\000\012" +
    "\025\uffd6\026\uffd6\042\uffd6\043\uffd6\001\002\000\004\043" +
    "\uffeb\001\002\000\012\007\037\027\044\035\053\041\051" +
    "\001\002\000\012\007\037\027\044\035\053\041\051\001" +
    "\002\000\012\007\037\027\044\035\053\041\051\001\002" +
    "\000\012\007\037\027\044\035\053\041\051\001\002\000" +
    "\012\007\037\027\044\035\053\041\051\001\002\000\012" +
    "\007\037\027\044\035\053\041\051\001\002\000\022\005" +
    "\055\006\060\007\056\010\057\025\uffe4\026\uffe4\042\uffe4" +
    "\043\uffe4\001\002\000\022\005\055\006\060\007\056\010" +
    "\057\025\uffe3\026\uffe3\042\uffe3\043\uffe3\001\002\000\022" +
    "\005\055\006\060\007\056\010\057\025\uffe2\026\uffe2\042" +
    "\uffe2\043\uffe2\001\002\000\022\005\055\006\060\007\056" +
    "\010\057\025\uffe0\026\uffe0\042\uffe0\043\uffe0\001\002\000" +
    "\022\005\055\006\060\007\056\010\057\025\uffdf\026\uffdf" +
    "\042\uffdf\043\uffdf\001\002\000\022\005\055\006\060\007" +
    "\056\010\057\025\uffe1\026\uffe1\042\uffe1\043\uffe1\001\002" +
    "\000\036\005\uffd9\006\060\007\uffd9\010\057\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\025\uffd9\026\uffd9" +
    "\042\uffd9\043\uffd9\001\002\000\020\007\037\024\050\027" +
    "\044\030\046\035\043\041\051\043\ufff4\001\002\000\010" +
    "\025\067\026\066\043\ufff3\001\002\000\004\043\uffee\001" +
    "\002\000\010\002\ufffd\012\ufffd\043\ufffd\001\002\000\016" +
    "\007\037\024\050\027\044\030\046\035\043\041\051\001" +
    "\002\000\010\025\067\026\066\042\116\001\002\000\006" +
    "\043\117\044\007\001\002\000\004\044\007\001\002\000" +
    "\004\043\121\001\002\000\004\014\122\001\002\000\004" +
    "\044\007\001\002\000\004\043\ufff1\001\002\000\004\043" +
    "\ufff2\001\002\000\006\031\126\043\ufff6\001\002\000\004" +
    "\043\ufff5\001\002\000\004\043\uffec\001\002\000\014\007" +
    "\037\027\044\035\053\041\051\043\ufff8\001\002\000\014" +
    "\005\055\006\060\007\056\010\057\043\ufff7\001\002\000" +
    "\016\007\037\024\050\027\044\030\046\035\043\041\051" +
    "\001\002\000\010\025\067\026\066\042\134\001\002\000" +
    "\004\043\135\001\002\000\004\044\007\001\002\000\004" +
    "\043\uffea\001\002\000\004\043\ufff0\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\010\004\007\001\001\000\016" +
    "\004\027\005\022\006\017\007\020\010\013\011\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\033\004\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\044\013\046\014\040\015\037\016" +
    "\041\001\001\000\006\012\106\016\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\044\013\064\014\040\015" +
    "\037\016\041\001\001\000\006\012\051\016\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\063\016\041\001\001\000\006\012\062\016\041" +
    "\001\001\000\006\012\061\016\041\001\001\000\006\012" +
    "\060\016\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\044\013\070\014\040\015\037\016\041\001\001" +
    "\000\014\012\044\013\067\014\040\015\037\016\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\105\016\041\001\001\000\006\012\104\016" +
    "\041\001\001\000\006\012\103\016\041\001\001\000\006" +
    "\012\102\016\041\001\001\000\006\012\101\016\041\001" +
    "\001\000\006\012\100\016\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\044\013\110\014\040\015\037\016\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\044\013\114\014\040\015\037\016\041\001\001\000" +
    "\002\001\001\000\006\003\117\004\007\001\001\000\006" +
    "\003\123\004\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\122\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\130\016\041\001\001\000\002" +
    "\001\001\000\014\012\044\013\132\014\040\015\037\016" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\135\004\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static abstract class Expr {
    public abstract int eval();
    public abstract Location right();
    public abstract Location left();
    static class BinExpr extends Expr {
        Expr l, r;
        int s;
        BinExpr(Expr l, int sym, Expr r) {
            this.l = l;
            this.r = r;
            this.s = sym;
        }
        public int eval() {
            if (s==sym.PLUS) {
                return l.eval() + r.eval();
            } else {
                return l.eval() * r.eval();
            }
        }
        public Location left() {
            return l.left();
        }
        public Location right() {
            return r.right();
        }
    }
    static class Const extends Expr {
        Location l, r;
        Integer value;
        Const(Location l,Integer i,Location r) {
            this.l = l;
            this.r = r;
            this.value = i;
        }
        public int eval() {
            return value;
        }
        public Location left() {
            return l;
        }
        public Location right() {
            return r;
        }
    }
    }
    public static void main(String args[]) throws Exception {
        ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
        if (args.length == 0) {
            new Parser(new Scanner(System.in, symbolFactory), symbolFactory).parse();
        } else {
            new Parser(new Scanner(new java.io.FileInputStream(args[0]), symbolFactory), symbolFactory).parse();
        }
    }

    public void syntax_error(Symbol sym){ 
    // Mute legacy Error Printing
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MAIN EOL BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOCK ::= LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINE ::= TAB LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINE",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINE ::= TAB INSTRUCTION EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINE",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= BLOCK_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= BLOCK_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= COMMAND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASSIGNMENT ::= TYPE_INT VAR_NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASSIGNMENT ::= TYPE_INT VAR_NAME EXP_NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASSIGNMENT ::= TYPE_STR VAR_NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASSIGNMENT ::= TYPE_STR VAR_NAME LIT_STR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ASSIGNMENT ::= TYPE_BOOL VAR_NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ASSIGNMENT ::= TYPE_BOOL VAR_NAME EXP_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOCK_IF ::= IF LPAREN EXP_BOOL RPAREN EOL BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_IF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOCK_IF ::= IF LPAREN EXP_BOOL RPAREN BLOCK EOL ELSE BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_IF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMMAND ::= READ VAR_NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMMAND",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMMAND ::= WRITE_VAR VAR_NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMMAND",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COMMAND ::= WRITE LIT_STR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMMAND",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COMMAND ::= EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMMAND",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COMMAND ::= EOL LIT_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMMAND",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOCK_WHILE ::= DO EOL BLOCK WHILE LPAREN EXP_BOOL RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOCK_WHILE ::= WHILE LPAREN EXP_BOOL RPAREN EOL BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NUM_RESULT ::= LIT_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUM_RESULT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NUM_RESULT ::= VAR_NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NUM_RESULT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BOOL_RESULT ::= COMPARATOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_RESULT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BOOL_RESULT ::= LIT_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_RESULT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BOOL_RESULT ::= VAR_NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_RESULT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMPARATOR ::= EXP_NUM LT EXP_NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARATOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMPARATOR ::= EXP_NUM GT EXP_NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARATOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMPARATOR ::= EXP_NUM LE EXP_NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARATOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COMPARATOR ::= EXP_NUM GE EXP_NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARATOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COMPARATOR ::= EXP_NUM EQ EXP_NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARATOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COMPARATOR ::= EXP_NUM NEQ EXP_NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARATOR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP_NUM ::= EXP_NUM PLUS EXP_NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_NUM",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP_NUM ::= EXP_NUM MINUS EXP_NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_NUM",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP_NUM ::= EXP_NUM TIMES EXP_NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_NUM",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP_NUM ::= EXP_NUM DIVIDE EXP_NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_NUM",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP_NUM ::= LPAREN EXP_NUM RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_NUM",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP_NUM ::= MINUS EXP_NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_NUM",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP_NUM ::= NUM_RESULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_NUM",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP_BOOL ::= EXP_BOOL OR EXP_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_BOOL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP_BOOL ::= EXP_BOOL AND EXP_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_BOOL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP_BOOL ::= NOT EXP_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_BOOL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP_BOOL ::= BOOL_RESULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_BOOL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

