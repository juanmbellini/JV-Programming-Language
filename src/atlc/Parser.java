
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package atlc;

import java_cup.runtime.*;
import atlc.nodes.*;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.commons.Method;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.*;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.List;
import java.util.ArrayList;
import java.util.function.Function;
import org.objectweb.asm.Type;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\011\000\002\004\007" +
    "\000\002\005\007\000\002\005\002\000\002\006\004\000" +
    "\002\006\002\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\004\000\002\013\003\000\002\013\005" +
    "\000\002\014\006\000\002\015\006\000\002\017\004\000" +
    "\002\017\006\000\002\011\006\000\002\011\005\000\002" +
    "\020\006\000\002\025\004\000\002\025\002\000\002\010" +
    "\005\000\002\010\003\000\002\012\010\000\002\016\007" +
    "\000\002\016\007\000\002\016\007\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\022\003\000\002\022\007\000\002\022" +
    "\007\000\002\022\007\000\002\022\007\000\002\022\007" +
    "\000\002\022\007\000\002\022\007\000\002\022\007\000" +
    "\002\022\007\000\002\022\007\000\002\022\007\000\002" +
    "\022\007\000\002\022\007\000\002\022\007\000\002\022" +
    "\004\000\002\022\004\000\002\022\004\000\002\023\003" +
    "\000\002\023\007\000\002\023\007\000\002\023\007\000" +
    "\002\023\007\000\002\023\007\000\002\023\007\000\002" +
    "\023\007\000\002\024\003\000\002\026\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\026\002\ufffe\004\004\005\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\016\ufffe\025\ufffe\030\ufffe\001\002" +
    "\000\006\006\204\036\203\001\002\000\004\002\202\001" +
    "\002\000\024\002\ufff8\005\011\012\025\013\026\014\014" +
    "\015\013\016\020\025\017\030\012\001\002\000\026\002" +
    "\ufffe\004\004\005\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\016\ufffe\025\ufffe\030\ufffe\001\002\000\024\002\uffff\005" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\025\uffff" +
    "\030\uffff\001\002\000\006\006\177\011\176\001\002\000" +
    "\004\006\173\001\002\000\004\017\167\001\002\000\004" +
    "\017\163\001\002\000\026\002\ufff3\005\ufff3\010\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\025\ufff3\030\ufff3" +
    "\001\002\000\026\002\ufff2\005\ufff2\010\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\025\ufff2\030\ufff2\001\002" +
    "\000\004\006\160\001\002\000\004\017\154\001\002\000" +
    "\026\002\ufff7\005\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\025\ufff7\030\ufff7\001\002\000\004\002" +
    "\000\001\002\000\030\002\ufff0\005\ufff0\010\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\025\ufff0\026\146\030" +
    "\ufff0\001\002\000\026\002\ufff6\005\ufff6\010\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\025\ufff6\030\ufff6\001" +
    "\002\000\004\036\142\001\002\000\006\006\035\017\036" +
    "\001\002\000\004\011\034\001\002\000\026\002\ufff5\005" +
    "\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\025\ufff5\030\ufff5\001\002\000\026\002\ufff4\005\ufff4\010" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\025\ufff4" +
    "\030\ufff4\001\002\000\026\002\ufff8\005\011\010\ufff8\012" +
    "\025\013\026\014\014\015\013\016\020\025\017\030\012" +
    "\001\002\000\006\002\ufff9\010\ufff9\001\002\000\026\002" +
    "\ufff1\005\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\025\ufff1\030\ufff1\001\002\000\004\035\136\001" +
    "\002\000\024\013\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\001\002\000\024\013" +
    "\047\020\052\022\046\023\051\024\053\031\040\032\056" +
    "\033\050\034\045\001\002\000\004\006\120\001\002\000" +
    "\030\011\uffde\013\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\031\uffde\032\uffde\033\uffde\034\uffde\001\002\000" +
    "\030\011\uffdb\013\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\001\002\000" +
    "\024\013\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\001\002\000\030\011\uffdd\013" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\001\002\000\014\013\117\023" +
    "\051\032\056\033\050\034\045\001\002\000\032\006\uffc8" +
    "\011\uffc8\013\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\001\002\000\032" +
    "\011\uffdc\013\uffdc\017\036\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\001\002" +
    "\000\004\006\077\001\002\000\032\006\uffda\011\uffda\013" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\001\002\000\032\006\uffe8\011" +
    "\uffe8\013\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\001\002\000\030\011" +
    "\uffc0\013\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\001\002\000\026\013" +
    "\uffe4\020\uffe4\021\075\022\uffe4\023\uffe4\024\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\001\002\000\030\011\uffdf\013" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\001\002\000\004\006\057\001" +
    "\002\000\010\013\062\022\046\031\040\001\002\000\004" +
    "\006\072\001\002\000\004\006\067\001\002\000\006\006" +
    "\063\017\036\001\002\000\010\013\065\022\046\031\040" +
    "\001\002\000\032\006\uffd6\011\uffd6\013\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\001\002\000\034\006\uffd3\011\uffd3\013\uffd3\017" +
    "\036\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\001\002\000\032\006\uffd7\011" +
    "\uffd7\013\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\001\002\000\010\013" +
    "\071\022\046\031\040\001\002\000\032\006\uffd9\011\uffd9" +
    "\013\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\001\002\000\032\006\uffd5" +
    "\011\uffd5\013\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\001\002\000\004" +
    "\013\074\001\002\000\032\006\uffd8\011\uffd8\013\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\001\002\000\034\006\uffd4\011\uffd4\013" +
    "\uffd4\017\036\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\001\002\000\004\006" +
    "\076\001\002\000\024\013\uffe5\020\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\001\002\000" +
    "\014\013\102\023\051\032\056\033\050\034\045\001\002" +
    "\000\004\006\112\001\002\000\004\006\107\001\002\000" +
    "\006\006\103\017\036\001\002\000\014\013\106\023\051" +
    "\032\056\033\050\034\045\001\002\000\032\006\uffcf\011" +
    "\uffcf\013\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\001\002\000\032\006" +
    "\uffd0\011\uffd0\013\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\001\002\000" +
    "\034\006\uffcc\011\uffcc\013\uffcc\017\036\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\001\002\000\014\013\111\023\051\032\056\033\050" +
    "\034\045\001\002\000\032\006\uffd2\011\uffd2\013\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\001\002\000\032\006\uffce\011\uffce\013" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\001\002\000\004\013\114\001" +
    "\002\000\032\006\uffd1\011\uffd1\013\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\001\002\000\034\006\uffcd\011\uffcd\013\uffcd\017\036" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\001\002\000\032\006\uffca\011\uffca" +
    "\013\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\001\002\000\032\006\uffcb" +
    "\011\uffcb\013\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\001\002\000\034" +
    "\006\uffc9\011\uffc9\013\uffc9\017\036\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\001\002\000\010\013\123\022\046\031\040\001\002\000" +
    "\004\006\133\001\002\000\004\006\130\001\002\000\006" +
    "\006\124\017\036\001\002\000\010\013\127\022\046\031" +
    "\040\001\002\000\032\006\uffc4\011\uffc4\013\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\001\002\000\032\006\uffc5\011\uffc5\013\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\001\002\000\034\006\uffc1\011\uffc1" +
    "\013\uffc1\017\036\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\001\002\000\010" +
    "\013\132\022\046\031\040\001\002\000\032\006\uffc7\011" +
    "\uffc7\013\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\001\002\000\032\006" +
    "\uffc3\011\uffc3\013\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\001\002\000" +
    "\004\013\135\001\002\000\032\006\uffc6\011\uffc6\013\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\001\002\000\034\006\uffc2\011\uffc2" +
    "\013\uffc2\017\036\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\001\002\000\004" +
    "\006\137\001\002\000\022\013\047\022\046\023\051\024" +
    "\053\031\040\032\056\033\050\034\045\001\002\000\004" +
    "\011\141\001\002\000\026\002\uffe3\005\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\025\uffe3\030\uffe3" +
    "\001\002\000\004\013\144\001\002\000\026\002\uffe9\005" +
    "\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\025\uffe9\030\uffe9\001\002\000\006\006\035\011\145\001" +
    "\002\000\026\002\uffea\005\uffea\010\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\025\uffea\030\uffea\001\002\000" +
    "\004\011\147\001\002\000\004\007\151\001\002\000\026" +
    "\002\uffef\005\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\025\uffef\030\uffef\001\002\000\024\005\011" +
    "\010\ufff8\012\025\013\026\014\014\015\013\016\020\025" +
    "\017\030\012\001\002\000\004\010\153\001\002\000\032" +
    "\002\uffbf\004\uffbf\005\uffbf\010\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\025\uffbf\026\uffbf\030\uffbf\001\002" +
    "\000\022\013\047\022\046\023\051\024\053\031\040\032" +
    "\056\033\050\034\045\001\002\000\004\020\156\001\002" +
    "\000\004\011\157\001\002\000\026\002\uffe0\005\uffe0\010" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\025\uffe0" +
    "\030\uffe0\001\002\000\012\023\051\032\056\033\050\034" +
    "\045\001\002\000\004\011\147\001\002\000\030\002\uffee" +
    "\005\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\025\uffee\026\uffee\030\uffee\001\002\000\004\013\164" +
    "\001\002\000\004\020\165\001\002\000\004\011\166\001" +
    "\002\000\026\002\uffe2\005\uffe2\010\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\025\uffe2\030\uffe2\001\002\000" +
    "\022\013\047\022\046\023\051\024\053\031\040\032\056" +
    "\033\050\034\045\001\002\000\004\020\171\001\002\000" +
    "\004\011\172\001\002\000\026\002\uffe1\005\uffe1\010\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\025\uffe1\030" +
    "\uffe1\001\002\000\012\023\051\032\056\033\050\034\045" +
    "\001\002\000\004\011\147\001\002\000\026\002\uffed\005" +
    "\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\025\uffed\030\uffed\001\002\000\026\002\uffec\005\uffec\010" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\025\uffec" +
    "\030\uffec\001\002\000\022\013\047\022\046\023\051\024" +
    "\053\031\040\032\056\033\050\034\045\001\002\000\004" +
    "\011\201\001\002\000\026\002\uffeb\005\uffeb\010\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\025\uffeb\030\uffeb" +
    "\001\002\000\004\002\001\001\002\000\004\012\215\001" +
    "\002\000\004\013\205\001\002\000\006\006\207\011\ufffa" +
    "\001\002\000\004\011\147\001\002\000\004\012\210\001" +
    "\002\000\004\036\211\001\002\000\004\013\212\001\002" +
    "\000\006\006\207\011\ufffa\001\002\000\004\011\ufffb\001" +
    "\002\000\026\002\ufffc\004\ufffc\005\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\025\ufffc\030\ufffc\001\002\000" +
    "\004\006\216\001\002\000\004\013\217\001\002\000\006" +
    "\006\207\011\ufffa\001\002\000\004\011\147\001\002\000" +
    "\026\002\ufffd\004\ufffd\005\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\015\ufffd\016\ufffd\025\ufffd\030\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\010\002\004\003\005\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\021\007\031" +
    "\011\027\012\030\013\020\014\022\015\023\016\014\017" +
    "\015\020\026\001\001\000\006\003\007\004\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\032\007\031" +
    "\011\027\012\030\013\020\014\022\015\023\016\014\017" +
    "\015\020\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\036\001\001\000\016\010" +
    "\042\020\041\021\053\022\054\023\040\024\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\114\022\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\057\023\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\063\023\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\077\022\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\103\022\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\120\023\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\124\023\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\041\021\137\022" +
    "\054\023\040\024\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\006\151\007" +
    "\031\011\027\012\030\013\020\014\022\015\023\016\014" +
    "\017\015\020\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\041\021\154\022\054\023\040\024\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\160\001\001\000\004\026\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\041\021\167" +
    "\022\054\023\040\024\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\173\001\001" +
    "\000\004\026\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\041\021\177\022\054\023\040\024\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\205" +
    "\001\001\000\004\026\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\217\001\001\000\004\026\220" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static final Logger l = Logger.getLogger("PARSER");
	protected Context context;

	public Parser(Scanner scanner, SymbolFactory factory, ClassWriter classWriter) {
		this(scanner, factory);
		this.context = new Context(classWriter);
	}

	public void syntax_error(Symbol s) {
		System.err.println("Syntax error at " + s);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= method_list stmt_list 
            {
              Object RESULT =null;
		Location mlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<MethodNode> ml = (List<MethodNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		InsnList sl = (InsnList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            context.endMethod();
			context.getCw().visitEnd();
			Parser.l.log(Level.INFO, "stmt_list -> PARSE COMPLETE!");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // method_list ::= method method_list 
            {
              List<MethodNode> RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MethodNode m = (MethodNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location mlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location mlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<MethodNode> ml = (List<MethodNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ml.add(m);
			RESULT = ml;
			Parser.l.log(Level.INFO, "method method_list -> method_list");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // method_list ::= 
            {
              List<MethodNode> RESULT =null;
		
			context.start(Method.getMethod("void main (String[])"));
			Parser.l.log(Level.INFO, "lambda -> method_list");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // method ::= FUNC ASSIGN_TYPE TYPE SP VAR_NAME param_list block 
            {
              MethodNode RESULT =null;
		
			Parser.l.log(Level.INFO, "FUNC ASSIGN_TYPE TYPE SP VAR_NAME param_list block -> method");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // method ::= FUNC SP VAR_NAME param_list block 
            {
              MethodNode RESULT =null;
		
			Parser.l.log(Level.INFO, "FUNC SP VAR_NAME param_list block -> method");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // param_list ::= SP TYPE ASSIGN_TYPE VAR_NAME param_list 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "SP TYPE ASSIGN_TYPE VAR_NAME param_list -> param_list");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // param_list ::= 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "lambda -> param_list");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt_list ::= stmt stmt_list 
            {
              InsnList RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		InsnList s = (InsnList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		InsnList sl = (InsnList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			Parser.l.log(Level.INFO, "stmt stmt_list -> stmt_list ");
			if (s != null) sl.add(s);
			RESULT = sl;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt_list ::= 
            {
              InsnList RESULT =null;
		
			Parser.l.log(Level.INFO, "lambda -> stmt_list");
			RESULT = new InsnList();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= stmt_if_maybe_else 
            {
              InsnList RESULT =null;
		
			Parser.l.log(Level.INFO, "stmt_if_maybe_else -> stmt");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= stmt_while 
            {
              InsnList RESULT =null;
		
			Parser.l.log(Level.INFO, "stmt_while -> stmt");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= stmt_def_maybe_assign 
            {
              InsnList RESULT =null;
		
			Parser.l.log(Level.INFO, "stmt_def_maybe_assign -> stmt");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= stmt_assign 
            {
              InsnList RESULT =null;
		
			Parser.l.log(Level.INFO, "assign -> stmt");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= stmt_io 
            {
              InsnList RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		InsnList s = (InsnList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = s;
			Parser.l.log(Level.INFO, "stmt_io -> stmt");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= stmt_exit 
            {
              InsnList RESULT =null;
		
			Parser.l.log(Level.INFO, "stmt_exit -> stmt");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= stmt_method_call EOL 
            {
              InsnList RESULT =null;
		
			Parser.l.log(Level.INFO, "stmt_method_call EOL -> stmt");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt_if_maybe_else ::= stmt_if 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "stmt_if -> stmt_if_maybe_else");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_if_maybe_else",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt_if_maybe_else ::= stmt_if ELSE block 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "stmt_if ELSE block -> stmt_if_maybe_else");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_if_maybe_else",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt_if ::= IF SP expr_bool block 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "IF SP expr_bool block -> stmt_if");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_if",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt_while ::= WHILE SP expr_bool block 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "WHILE expr_bool block -> stmt_while");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_while",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt_exit ::= RET EOL 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "RET EOL -> stmt_exit");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_exit",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt_exit ::= RET SP expr EOL 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "RET SP expr EOL -> stmt_exit");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_exit",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt_def_maybe_assign ::= TYPE ASSIGN_TYPE VAR_NAME EOL 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "TYPE ASSIGN_TYPE VAR_NAME EOL -> stmt_def_maybe_assign");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_maybe_assign",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt_def_maybe_assign ::= TYPE ASSIGN_TYPE stmt_assign 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "TYPE ASSIGN_TYPE stmt_assign -> stmt_def_maybe_assign");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_maybe_assign",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt_method_call ::= VAR_NAME LPAREN method_argument_list RPAREN 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "VAR_NAME LPAREN method_argument_list RPAREN -> stmt_method_call");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_method_call",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method_argument_list ::= method_argument_list method_argument 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "method_argument_list method_argument -> method_argument_list");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_argument_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_argument_list ::= 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "lambda -> method_argument_list");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_argument_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method_argument ::= expr COMMA SP 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "expr COMMA SP -> method_argument");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_argument",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method_argument ::= expr 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "expr -> method_argument");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_argument",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt_assign ::= VAR_NAME SP ASSIGN SP expr EOL 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "VAR_NAME SP ASSIGN SP expr EOL -> stmt_assign");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_assign",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt_io ::= READ_LINE LPAREN VAR_NAME RPAREN EOL 
            {
              InsnList RESULT =null;
		
			Parser.l.log(Level.INFO, "READ_LINE SP VAR_NAME EOL -> stmt_io");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_io",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt_io ::= WRITE_LINE LPAREN expr RPAREN EOL 
            {
              InsnList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Function<Context,Type> e = (Function<Context,Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
			FunctionFactory.writeLine(e, context);
			Parser.l.log(Level.INFO, "WRITE_LINE SP expr EOL -> stmt_io");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_io",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt_io ::= WRITE LPAREN expr RPAREN EOL 
            {
              InsnList RESULT =null;
		
			Parser.l.log(Level.INFO, "WRITE SP expr EOL -> stmt_io");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_io",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr_bool 
            {
              Function<Context,Type> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Function<Context,Type> e = (Function<Context,Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		    RESULT = e;
			Parser.l.log(Level.INFO, "expr_bool -> expr");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr_int 
            {
              Function<Context,Type> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Function<Context,Type> e = (Function<Context,Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		    RESULT = e;
			Parser.l.log(Level.INFO, "expr_int -> expr");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr_str 
            {
              Function<Context,Type> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Function<Context,Type> e = (Function<Context,Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		    RESULT = e;
			Parser.l.log(Level.INFO, "expr_str -> expr");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= VAR_NAME 
            {
              Function<Context,Type> RESULT =null;
		
			// TODO;
			Parser.l.log(Level.INFO, "VAR_NAME -> expr");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= stmt_method_call 
            {
              Function<Context,Type> RESULT =null;
		
			// TODO;
			Parser.l.log(Level.INFO, "stmt_method_call -> expr");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_bool ::= LIT_BOOL 
            {
              Function<Context,Type> RESULT =null;
		Location lbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean lb = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = LogicalFactory.createLiteral(lb);
			Parser.l.log(Level.INFO, "LIT_BOOL -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_bool ::= BOOLEAN_OPERATOR SP expr_int SP expr_int 
            {
              Function<Context,Type> RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		int op = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Function<Context,Type> e1 = (Function<Context,Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Function<Context,Type> e2 = (Function<Context,Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		    RESULT = LogicalFactory.createBinary(op, e1, e2);
			Parser.l.log(Level.INFO, "BOOLEAN_OPERATOR SP expr_bool SP expr_int -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_bool ::= BOOLEAN_OPERATOR SP stmt_method_call SP stmt_method_call 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "BOOLEAN_OPERATOR SP stmt_method_call SP stmt_method_call -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_bool ::= BOOLEAN_OPERATOR SP VAR_NAME SP expr_int 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "BOOLEAN_OPERATOR SP VAR_NAME SP expr_int -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_bool ::= BOOLEAN_OPERATOR SP VAR_NAME SP stmt_method_call 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "BOOLEAN_OPERATOR SP VAR_NAME SP stmt_method_call -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_bool ::= BOOLEAN_OPERATOR SP expr_int SP VAR_NAME 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "BOOLEAN_OPERATOR SP expr_int SP VAR_NAME -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_bool ::= BOOLEAN_OPERATOR SP stmt_method_call SP VAR_NAME 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "BOOLEAN_OPERATOR SP stmt_method_call SP VAR_NAME -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_bool ::= BOOLEAN_OPERATOR SP VAR_NAME SP VAR_NAME 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "BOOLEAN_OPERATOR SP VAR_NAME SP VAR_NAME -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_bool ::= LOGIC_OPERATOR SP expr_bool SP expr_bool 
            {
              Function<Context,Type> RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		int op = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Function<Context,Type> e1 = (Function<Context,Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Function<Context,Type> e2 = (Function<Context,Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		    RESULT = LogicalFactory.createBinary(op, e1, e2);
			Parser.l.log(Level.INFO, "LOGIC_OPERATOR SP expr_bool SP expr_bool -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_bool ::= LOGIC_OPERATOR SP stmt_method_call SP stmt_method_call 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "LOGIC_OPERATOR SP stmt_method_call SP stmt_method_call -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_bool ::= LOGIC_OPERATOR SP VAR_NAME SP expr_bool 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "LOGIC_OPERATOR SP VAR_NAME SP expr_bool -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_bool ::= LOGIC_OPERATOR SP VAR_NAME SP stmt_method_call 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "LOGIC_OPERATOR SP VAR_NAME SP stmt_method_call -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_bool ::= LOGIC_OPERATOR SP expr_bool SP VAR_NAME 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "LOGIC_OPERATOR SP VAR_NAME SP VAR_NAME -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_bool ::= LOGIC_OPERATOR SP stmt_method_call SP VAR_NAME 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "LOGIC_OPERATOR SP stmt_method_call SP VAR_NAME -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_bool ::= LOGIC_OPERATOR SP VAR_NAME SP VAR_NAME 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "LOGIC_OPERATOR SP VAR_NAME SP VAR_NAME -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_bool ::= UNARY_LOGIC_OPERATOR expr_bool 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "UNARY_LOGIC_OPERATOR expr_int -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_bool ::= UNARY_LOGIC_OPERATOR stmt_method_call 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "UNARY_LOGIC_OPERATOR stmt_method_call -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_bool ::= UNARY_LOGIC_OPERATOR VAR_NAME 
            {
              Function<Context,Type> RESULT =null;
		
			Parser.l.log(Level.INFO, "UNARY_LOGIC_OPERATOR VAR_NAME -> expr_bool");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_bool",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_int ::= LIT_INT 
            {
              Function<Context,Type> RESULT =null;
		Location lixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer li = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = ArithmeticFactory.createLiteral(li);
			Parser.l.log(Level.INFO, "LIT_INT -> expr_int");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_int",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_int ::= ARITHMETIC_OPERATOR SP expr_int SP expr_int 
            {
              Function<Context,Type> RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		int op = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Function<Context,Type> e1 = (Function<Context,Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Function<Context,Type> e2 = (Function<Context,Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		    RESULT = ArithmeticFactory.createBinary(op, e1, e2);
			Parser.l.log(Level.INFO, "ARITHMETIC_OPERATOR SP expr_int SP expr_int -> expr_int");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_int",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_int ::= ARITHMETIC_OPERATOR SP stmt_method_call SP stmt_method_call 
            {
              Function<Context,Type> RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		int op = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		    // TODO
			Parser.l.log(Level.INFO, "ARITHMETIC_OPERATOR SP stmt_method_call SP stmt_method_call -> expr_int");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_int",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_int ::= ARITHMETIC_OPERATOR SP VAR_NAME SP expr_int 
            {
              Function<Context,Type> RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		int op = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		    // TODO
			Parser.l.log(Level.INFO, "ARITHMETIC_OPERATOR SP VAR_NAME SP expr_int -> expr_int");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_int",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_int ::= ARITHMETIC_OPERATOR SP VAR_NAME SP stmt_method_call 
            {
              Function<Context,Type> RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		int op = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		    // TODO
			Parser.l.log(Level.INFO, "ARITHMETIC_OPERATOR SP VAR_NAME SP stmt_method_call -> expr_int");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_int",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_int ::= ARITHMETIC_OPERATOR SP expr_int SP VAR_NAME 
            {
              Function<Context,Type> RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		int op = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		    // TODO
			Parser.l.log(Level.INFO, "ARITHMETIC_OPERATOR SP expr_int SP VAR_NAME -> expr_int");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_int",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_int ::= ARITHMETIC_OPERATOR SP stmt_method_call SP VAR_NAME 
            {
              Function<Context,Type> RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		int op = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		    // TODO
			Parser.l.log(Level.INFO, "ARITHMETIC_OPERATOR SP stmt_method_call SP VAR_NAME -> expr_int");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_int",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_int ::= ARITHMETIC_OPERATOR SP VAR_NAME SP VAR_NAME 
            {
              Function<Context,Type> RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		int op = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
		    // TODO
			Parser.l.log(Level.INFO, "ARITHMETIC_OPERATOR SP VAR_NAME SP VAR_NAME -> expr_int");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_int",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_str ::= LIT_STR 
            {
              Function<Context,Type> RESULT =null;
		Location lsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String ls = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = StrExprFactory.createLiteral(ls);
			Parser.l.log(Level.INFO, "LIT_STR -> expr_str");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_str",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // block ::= EOL INDENT stmt_list DEDENT 
            {
              Object RESULT =null;
		
			Parser.l.log(Level.INFO, "EOL INDENT stmt_list DEDENT -> block");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
