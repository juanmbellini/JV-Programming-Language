
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Fri Jul 01 06:13:18 ART 2016
//----------------------------------------------------

package atlc;

import java_cup.runtime.*;
import atlc.ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Fri Jul 01 06:13:18 ART 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\004\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\007\006\000\002\010\006\000\002\015\003" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\005\000\002\017\005\000\002\017\004\000\002" +
    "\017\005\000\002\017\003\000\002\022\003\000\002\022" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\004\000" +
    "\002\020\003\000\002\021\003\000\002\023\007\000\002" +
    "\023\007\000\002\023\007\000\002\023\007\000\002\023" +
    "\007\000\002\023\007\000\002\011\004\000\002\011\005" +
    "\000\002\012\010\000\002\012\011\000\002\013\011\000" +
    "\002\014\004\000\002\014\003\000\002\024\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\004\005\001\002\000\004\002\162\001" +
    "\002\000\004\006\006\001\002\000\030\005\016\007\013" +
    "\011\015\012\033\013\032\014\027\020\012\021\020\022" +
    "\017\024\022\025\014\001\002\000\004\006\010\001\002" +
    "\000\004\002\000\001\002\000\010\006\ufff7\023\ufff7\025" +
    "\ufff7\001\002\000\004\014\161\001\002\000\030\005\016" +
    "\007\013\011\015\012\033\013\032\014\027\020\012\021" +
    "\020\022\017\024\022\025\014\001\002\000\004\010\153" +
    "\001\002\000\004\014\152\001\002\000\010\006\ufff5\023" +
    "\ufff5\025\ufff5\001\002\000\004\010\141\001\002\000\004" +
    "\010\137\001\002\000\010\006\ufff9\023\ufff9\025\ufff9\001" +
    "\002\000\004\006\006\001\002\000\012\006\ufffb\023\ufffb" +
    "\025\ufffb\045\126\001\002\000\010\006\ufffa\023\ufffa\025" +
    "\ufffa\001\002\000\010\006\ufff6\023\ufff6\025\ufff6\001\002" +
    "\000\010\006\ufffc\023\ufffc\025\ufffc\001\002\000\004\045" +
    "\037\001\002\000\010\006\006\023\ufffe\025\ufffe\001\002" +
    "\000\010\006\ufff8\023\ufff8\025\ufff8\001\002\000\004\014" +
    "\035\001\002\000\004\014\034\001\002\000\012\006\ufff3" +
    "\023\ufff3\025\ufff3\045\ufff3\001\002\000\012\006\ufff2\023" +
    "\ufff2\025\ufff2\045\ufff2\001\002\000\010\006\uffff\023\uffff" +
    "\025\uffff\001\002\000\004\010\040\001\002\000\016\015" +
    "\046\016\050\017\052\026\055\032\041\042\054\001\002" +
    "\000\010\015\046\026\073\032\041\001\002\000\016\006" +
    "\uffe7\023\uffe7\025\uffe7\027\uffe7\043\uffe7\044\uffe7\001\002" +
    "\000\022\006\uffec\010\070\023\uffec\025\uffec\030\065\031" +
    "\071\032\066\033\067\001\002\000\016\006\uffe5\023\uffe5" +
    "\025\uffe5\027\uffe5\043\uffe5\044\uffe5\001\002\000\010\006" +
    "\ufff0\023\ufff0\025\ufff0\001\002\000\030\006\uffdd\010\uffdd" +
    "\023\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\043\uffdd\044\uffdd\001\002\000\030\006\uffde\010\uffde" +
    "\023\uffde\025\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\043\uffde\044\uffde\001\002\000\016\006\uffe6\023\uffe6" +
    "\025\uffe6\027\uffe6\043\uffe6\044\uffe6\001\002\000\010\006" +
    "\uffee\023\uffee\025\uffee\001\002\000\010\006\uffef\023\uffef" +
    "\025\uffef\001\002\000\014\006\uffed\023\uffed\025\uffed\043" +
    "\062\044\061\001\002\000\014\015\046\016\050\026\055" +
    "\032\041\042\054\001\002\000\014\015\046\016\050\026" +
    "\055\032\041\042\054\001\002\000\016\010\070\027\075" +
    "\030\065\031\071\032\066\033\067\001\002\000\010\027" +
    "\060\043\062\044\061\001\002\000\016\006\uffe8\023\uffe8" +
    "\025\uffe8\027\uffe8\043\uffe8\044\uffe8\001\002\000\014\015" +
    "\046\016\050\026\055\032\041\042\054\001\002\000\014" +
    "\015\046\016\050\026\055\032\041\042\054\001\002\000" +
    "\014\010\070\030\065\031\071\032\066\033\067\001\002" +
    "\000\016\006\uffeb\023\uffeb\025\uffeb\027\uffeb\043\uffeb\044" +
    "\061\001\002\000\010\015\046\026\073\032\041\001\002" +
    "\000\010\015\046\026\073\032\041\001\002\000\010\015" +
    "\046\026\073\032\041\001\002\000\016\034\076\035\103" +
    "\036\100\037\077\040\101\041\102\001\002\000\010\015" +
    "\046\026\073\032\041\001\002\000\030\006\uffe2\010\uffe2" +
    "\023\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\043\uffe2\044\uffe2\001\002\000\010\015\046\026\073" +
    "\032\041\001\002\000\014\027\075\030\065\031\071\032" +
    "\066\033\067\001\002\000\030\006\uffe0\010\uffe0\023\uffe0" +
    "\025\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\043" +
    "\uffe0\044\uffe0\001\002\000\004\010\116\001\002\000\004" +
    "\010\114\001\002\000\004\010\112\001\002\000\004\010" +
    "\110\001\002\000\004\010\106\001\002\000\004\010\104" +
    "\001\002\000\010\015\046\026\073\032\041\001\002\000" +
    "\026\006\uffd7\023\uffd7\025\uffd7\027\uffd7\030\065\031\071" +
    "\032\066\033\067\043\uffd7\044\uffd7\001\002\000\010\015" +
    "\046\026\073\032\041\001\002\000\026\006\uffd9\023\uffd9" +
    "\025\uffd9\027\uffd9\030\065\031\071\032\066\033\067\043" +
    "\uffd9\044\uffd9\001\002\000\010\015\046\026\073\032\041" +
    "\001\002\000\026\006\uffda\023\uffda\025\uffda\027\uffda\030" +
    "\065\031\071\032\066\033\067\043\uffda\044\uffda\001\002" +
    "\000\010\015\046\026\073\032\041\001\002\000\026\006" +
    "\uffdb\023\uffdb\025\uffdb\027\uffdb\030\065\031\071\032\066" +
    "\033\067\043\uffdb\044\uffdb\001\002\000\010\015\046\026" +
    "\073\032\041\001\002\000\026\006\uffdc\023\uffdc\025\uffdc" +
    "\027\uffdc\030\065\031\071\032\066\033\067\043\uffdc\044" +
    "\uffdc\001\002\000\010\015\046\026\073\032\041\001\002" +
    "\000\026\006\uffd8\023\uffd8\025\uffd8\027\uffd8\030\065\031" +
    "\071\032\066\033\067\043\uffd8\044\uffd8\001\002\000\030" +
    "\006\uffe1\010\uffe1\023\uffe1\025\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\043\uffe1\044\uffe1\001\002\000\030" +
    "\006\uffe3\010\uffe3\023\uffe3\025\uffe3\027\uffe3\030\uffe3\031" +
    "\071\032\uffe3\033\067\043\uffe3\044\uffe3\001\002\000\030" +
    "\006\uffe4\010\uffe4\023\uffe4\025\uffe4\027\uffe4\030\uffe4\031" +
    "\071\032\uffe4\033\067\043\uffe4\044\uffe4\001\002\000\016" +
    "\006\uffea\023\uffea\025\uffea\027\uffea\043\uffea\044\uffea\001" +
    "\002\000\016\006\uffe9\023\uffe9\025\uffe9\027\uffe9\043\uffe9" +
    "\044\uffe9\001\002\000\030\006\uffdf\010\uffdf\023\uffdf\025" +
    "\uffdf\027\uffdf\030\uffdf\031\071\032\uffdf\033\067\043\uffdf" +
    "\044\uffdf\001\002\000\004\010\127\001\002\000\016\015" +
    "\046\016\050\017\052\026\055\032\041\042\054\001\002" +
    "\000\010\006\ufff1\023\ufff1\025\ufff1\001\002\000\004\025" +
    "\132\001\002\000\004\010\133\001\002\000\004\026\134" +
    "\001\002\000\014\015\046\016\050\026\055\032\041\042" +
    "\054\001\002\000\010\027\136\043\062\044\061\001\002" +
    "\000\010\006\uffd3\023\uffd3\025\uffd3\001\002\000\016\015" +
    "\046\016\050\017\052\026\055\032\041\042\054\001\002" +
    "\000\010\006\uffd5\023\uffd5\025\uffd5\001\002\000\004\026" +
    "\142\001\002\000\014\015\046\016\050\026\055\032\041" +
    "\042\054\001\002\000\010\027\144\043\062\044\061\001" +
    "\002\000\004\006\006\001\002\000\010\006\uffcf\023\147" +
    "\025\uffcf\001\002\000\010\006\uffd0\023\uffd0\025\uffd0\001" +
    "\002\000\004\006\006\001\002\000\010\006\uffd2\023\uffd2" +
    "\025\uffd2\001\002\000\010\006\uffd1\023\uffd1\025\uffd1\001" +
    "\002\000\012\006\ufff4\023\ufff4\025\ufff4\045\ufff4\001\002" +
    "\000\004\026\154\001\002\000\014\015\046\016\050\026" +
    "\055\032\041\042\054\001\002\000\010\027\156\043\062" +
    "\044\061\001\002\000\004\006\006\001\002\000\010\006" +
    "\uffd4\023\uffd4\025\uffd4\001\002\000\010\006\ufffd\023\ufffd" +
    "\025\ufffd\001\002\000\010\006\uffd6\023\uffd6\025\uffd6\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\022\004\027\005\025\006\022" +
    "\007\023\010\020\011\030\012\010\013\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\157\005\025\006\022\007\023\010" +
    "\020\011\030\012\010\013\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\044\016\050\017\052\020\042\021" +
    "\046\022\041\023\043\001\001\000\006\020\124\021\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\123\020\062\021\046\022\041" +
    "\023\043\001\001\000\014\017\056\020\055\021\046\022" +
    "\041\023\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\122\020\062\021\046\022" +
    "\041\023\043\001\001\000\014\017\063\020\062\021\046" +
    "\022\041\023\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\121\021\046\001\001\000\006\020\120" +
    "\021\046\001\001\000\006\020\117\021\046\001\001\000" +
    "\002\001\001\000\006\020\071\021\046\001\001\000\002" +
    "\001\001\000\006\020\073\021\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\104\021\046\001\001\000\002" +
    "\001\001\000\006\020\106\021\046\001\001\000\002\001" +
    "\001\000\006\020\110\021\046\001\001\000\002\001\001" +
    "\000\006\020\112\021\046\001\001\000\002\001\001\000" +
    "\006\020\114\021\046\001\001\000\002\001\001\000\006" +
    "\020\116\021\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\127\016\050\017\052\020\042\021\046\022\041" +
    "\023\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\134\020\062" +
    "\021\046\022\041\023\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\137\016\050\017\052\020\042" +
    "\021\046\022\041\023\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\142\020\062\021\046\022\041" +
    "\023\043\001\001\000\002\001\001\000\004\003\144\001" +
    "\001\000\006\014\147\024\145\001\001\000\002\001\001" +
    "\000\004\003\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\154" +
    "\020\062\021\046\022\041\023\043\001\001\000\002\001" +
    "\001\000\004\003\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main(String args[]) throws Exception {
        ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
        if (args.length == 0) {
            new Parser(new Scanner(System.in, symbolFactory), symbolFactory).parse();
        } else {
            new Parser(new Scanner(new java.io.FileInputStream(args[0]), symbolFactory), symbolFactory).parse();
        }
    }

    public void syntax_error(Symbol sym){ 
    // Mute legacy Error Printing
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= MAIN BLOCK EOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOCK ::= EOL LINE BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOCK ::= EOL LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINE ::= TAB LINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINE",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LINE ::= INSTRUCTION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LINE",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= DECL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= DECL_ASS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= ASS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= COMMAND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= WHILE_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= IF_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECL ::= TYPE_INT VAR_NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECL ::= TYPE_BOOL VAR_NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECL ::= TYPE_STR VAR_NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECL_ASS ::= DECL ASSIGN SPACE VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_ASS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASS ::= VAR_NAME ASSIGN SPACE VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VALUE ::= LIT_STR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VALUE ::= EXPR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPR ::= BOOL_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPR ::= INT_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BOOL_EXP ::= BOOL_EXP OR BOOL_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_EXP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BOOL_EXP ::= BOOL_EXP AND BOOL_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_EXP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BOOL_EXP ::= NOT BOOL_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_EXP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BOOL_EXP ::= LPAREN BOOL_EXP RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_EXP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BOOL_EXP ::= BOOL_VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_EXP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BOOL_VALUE ::= LIT_BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BOOL_VALUE ::= COMP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BOOL_VALUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INT_EXP ::= INT_EXP PLUS INT_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_EXP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INT_EXP ::= INT_EXP MINUS INT_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_EXP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INT_EXP ::= INT_EXP TIMES INT_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_EXP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INT_EXP ::= INT_EXP DIVIDE INT_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_EXP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INT_EXP ::= LPAREN INT_EXP RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_EXP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INT_EXP ::= MINUS INT_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_EXP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INT_EXP ::= INT_VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_EXP",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INT_VALUE ::= LIT_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INT_VALUE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COMP ::= INT_EXP SPACE LT SPACE INT_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COMP ::= INT_EXP SPACE GT SPACE INT_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COMP ::= INT_EXP SPACE LE SPACE INT_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COMP ::= INT_EXP SPACE GE SPACE INT_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COMP ::= INT_EXP SPACE EQ SPACE INT_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COMP ::= INT_EXP SPACE NEQ SPACE INT_EXP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COMMAND ::= READ VAR_NAME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMMAND",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMMAND ::= WRITE SPACE VALUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMMAND",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // WHILE_B ::= WHILE SPACE LPAREN BOOL_EXP RPAREN BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_B",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WHILE_B ::= DO BLOCK WHILE SPACE LPAREN BOOL_EXP RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_B",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_B ::= IF SPACE LPAREN BOOL_EXP RPAREN BLOCK ELSE_B 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_B",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSE_B ::= ELSE BLOCK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_B",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE_B ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_B",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LAMBDA ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LAMBDA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

